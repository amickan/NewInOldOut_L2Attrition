num <- which(tolower(as.character(sim$X)) == wordlist$Dutch[i])
if (length(num)==1 && wordlist$Condition[i]==2) {
cond2[j] <- num
cond2freq[j] <- wordlist$FreqNLCelexLog[i]
j <- j +1
}
}
install.packages("tidyr")
for (i in 1:nrow(wordlist)) {
num <- which(tolower(as.character(sim$X)) == wordlist$Dutch[i])
if (length(num)==1 && wordlist$Condition[i]==2) {
cond2[j] <- num
cond2freq[j] <- wordlist$FreqNLCelexLog[i]
j <- j +1
}
}
debugSource('U:/PhD/EXPERIMENT 3 -Honours/ItemSorting.R', echo=TRUE)
install.packages("tidyr")
debug()
browser)_
browser()
for (i in 1:nrow(wordlist)) {
num <- which(tolower(as.character(sim$X)) == wordlist$Dutch[i])
if (length(num)==1 && wordlist$Condition[i]==2) {
cond2[j] <- num
cond2freq[j] <- wordlist$FreqNLCelexLog[i]
j <- j +1
}
}
for (i in 1:nrow(wordlist)) {
num <- which(tolower(as.character(sim$X)) == wordlist$Dutch[i])
if (length(num)==1 && wordlist$Condition[i]==2) {
cond2[j] <- num
cond2freq[j] <- wordlist$FreqNLCelexLog[i]
j <- j +1
}
}
for (i in 1:nrow(wordlist)) {
num <- which(tolower(as.character(sim$X)) == wordlist$Dutch[i])
if (length(num)==1 && wordlist$Condition[i]==2) {
cond2[j] <- num
cond2freq[j] <- wordlist$FreqNLCelexLog[i]
j <- j +1
}
}
source('U:/PhD/EXPERIMENT 3 -Honours/ItemSorting.R', echo=TRUE)
install.packages("tidyr")
for (i in 1:nrow(wordlist)) {
num <- which(tolower(as.character(sim$X)) == wordlist$Dutch[i]) # adjust that to the name of the column of the Dutch words if necessary
if (length(num)==1 && wordlist$Condition[i]==1) {
cond1[j] <- num
cond1freq[j] <- wordlist$FreqNLCelexLog[i] # adjust this to the column name of the frequency information
j <- j +1
}
}
if (length(num)==1 && wordlist$Condition[i]==1) {
cond1[j] <- num
cond1freq[j] <- wordlist$FreqNLCelexLog[i] # adjust this to the column name of the frequency information
j <- j +1
}
debugSource('U:/PhD/EXPERIMENT 3 -Honours/ItemSorting.R', echo=TRUE)
wordlist$Dutch[24]
which(tolower(as.character(sim$X)) == wordlist$Dutch[22])
which(tolower(as.character(sim$X)) == wordlist$Dutch[23])
wordlist$Dutch[23]
wordlist <- read.delim("ItemList_Corrected_C&P_Jan2018.txt", stringsAsFactors=FALSE)
wordlist <-wordlist[order(wordlist$Condition),]
cond1 <- NA
cond1freq <- NA
j <- 1
for (i in 1:nrow(wordlist)) {
num <- which(tolower(as.character(sim$X)) == wordlist$Dutch[i]) # adjust that to the name of the column of the Dutch words if necessary
if (length(num)==1 && wordlist$Condition[i]==1) {
cond1[j] <- num
cond1freq[j] <- wordlist$FreqNLCelexLog[i] # adjust this to the column name of the frequency information
j <- j +1
}
}
cond2 <- NA
j <- 1
cond2freq <- NA
for (i in 1:nrow(wordlist)) {
num <- which(tolower(as.character(sim$X)) == wordlist$Dutch[i])
if (length(num)==1 && wordlist$Condition[i]==2) {
cond2[j] <- num
cond2freq[j] <- wordlist$FreqNLCelexLog[i]
j <- j +1
}
}
sim[,-1] -> sim
View(sim)
sim[cond1,cond1]->Condition1low
sim[cond2,cond2]->Condition2low
as.numeric(as.matrix(Condition1low)) -> Cond1Newlow
as.numeric(as.matrix(Condition2low)) -> Cond2Newlow
cond1freq <- as.numeric(gsub(",", ".", as.character(cond1freq)))
cond2freq <- as.numeric(gsub(",", ".", as.character(cond2freq)))
t.test(Cond1Newlow,Cond2Newlow) # this compares semantic similarity between conditions
t.test(wordlist[wordlist$Condition==1,]$EnglishLength, wordlist[wordlist$Condition==2,]$EnglishLength) # this compares word length in Itlian
View(wordlist)
t.test(wordlist[wordlist$Condition==1,]$WordLength_EN, wordlist[wordlist$Condition==2,]$WordLength_EN) # this compares word length in Itlian
t.test(wordlist[wordlist$Condition==1,]$WordLength_ES, wordlist[wordlist$Condition==2,]$WordLength_ES) # this compares word length in Itlian
t.test(cond1freq,cond2freq) # this compares frequency
t.test(Cond1Newlow,Cond2Newlow) # this compares semantic similarity between conditions
View(wordlist)
sim <- read.csv("similarities.txt")
numbers <- NA
j <- 1
for (i in 1:50) {
num <- which(tolower(as.character(sim$X)) == wordlist$Dutch[i])
if (length(num)==1) {
numbers[j] <- num
j <- j +1
}
}
sim[,-1] -> sim
sim[numbers,numbers] -> sims
rownames(sims) <- t(colnames(sims))
View(sims)
round(sims,2)->sims
View(sims)
wordlist <- read.delim("ItemList_Corrected_C&P_Jan2018.txt", stringsAsFactors=FALSE)
sim <- read.csv("similarities.txt")
wordlist <-wordlist[order(wordlist$Condition),]
cond1 <- NA
cond1freq <- NA
j <- 1
for (i in 1:nrow(wordlist)) {
num <- which(tolower(as.character(sim$X)) == wordlist$Dutch[i]) # adjust that to the name of the column of the Dutch words if necessary
if (length(num)==1 && wordlist$Condition[i]==1) {
cond1[j] <- num
cond1freq[j] <- wordlist$FreqNLCelexLog[i] # adjust this to the column name of the frequency information
j <- j +1
}
}
cond2 <- NA
j <- 1
cond2freq <- NA
for (i in 1:nrow(wordlist)) {
num <- which(tolower(as.character(sim$X)) == wordlist$Dutch[i])
if (length(num)==1 && wordlist$Condition[i]==2) {
cond2[j] <- num
cond2freq[j] <- wordlist$FreqNLCelexLog[i]
j <- j +1
}
}
cond1freq <- as.numeric(gsub(",", ".", as.character(cond1freq)))
cond2freq <- as.numeric(gsub(",", ".", as.character(cond2freq)))
sim[,-1] -> sim
sim[cond1,cond1]->Condition1low
sim[cond2,cond2]->Condition2low
as.numeric(as.matrix(Condition1low)) -> Cond1Newlow
as.numeric(as.matrix(Condition2low)) -> Cond2Newlow
t.test(Cond1Newlow,Cond2Newlow) # this compares semantic similarity between conditions
t.test(wordlist[wordlist$Condition==1,]$WordLength_EN, wordlist[wordlist$Condition==2,]$WordLength_EN) # this compares word length in Itlian
t.test(wordlist[wordlist$Condition==1,]$WordLength_ES, wordlist[wordlist$Condition==2,]$WordLength_ES) # this compares word length in Itlian
t.test(cond1freq,cond2freq) # this compares frequency
t.test(Cond1Newlow,Cond2Newlow) # this compares semantic similarity between conditions
sim <- read.csv("similarities.txt")
numbers <- NA
j <- 1
for (i in 1:50) {
num <- which(tolower(as.character(sim$X)) == wordlist$Dutch[i])
if (length(num)==1) {
numbers[j] <- num
j <- j +1
}
}
sim[,-1] -> sim
sim[numbers,numbers] -> sims
rownames(sims) <- t(colnames(sims))
round(sims,2)->sims
View(sims)
wordlist <- read.delim("ItemList_Corrected_C&P_Jan2018.txt", stringsAsFactors=FALSE)
sim <- read.csv("similarities.txt")
wordlist <-wordlist[order(wordlist$Condition),]
cond1 <- NA
cond1freq <- NA
j <- 1
for (i in 1:nrow(wordlist)) {
num <- which(tolower(as.character(sim$X)) == wordlist$Dutch[i]) # adjust that to the name of the column of the Dutch words if necessary
if (length(num)==1 && wordlist$Condition[i]==1) {
cond1[j] <- num
cond1freq[j] <- wordlist$FreqNLCelexLog[i] # adjust this to the column name of the frequency information
j <- j +1
}
}
cond2 <- NA
j <- 1
cond2freq <- NA
for (i in 1:nrow(wordlist)) {
num <- which(tolower(as.character(sim$X)) == wordlist$Dutch[i])
if (length(num)==1 && wordlist$Condition[i]==2) {
cond2[j] <- num
cond2freq[j] <- wordlist$FreqNLCelexLog[i]
j <- j +1
}
}
cond1freq <- as.numeric(gsub(",", ".", as.character(cond1freq)))
cond2freq <- as.numeric(gsub(",", ".", as.character(cond2freq)))
sim[,-1] -> sim
sim[cond1,cond1]->Condition1low
sim[cond2,cond2]->Condition2low
as.numeric(as.matrix(Condition1low)) -> Cond1Newlow
as.numeric(as.matrix(Condition2low)) -> Cond2Newlow
t.test(Cond1Newlow,Cond2Newlow) # this compares semantic similarity between conditions
wordlist <- read.delim("ItemList_Corrected_C&P_Jan2018.txt", stringsAsFactors=FALSE)
sim <- read.csv("similarities.txt")
wordlist <-wordlist[order(wordlist$Condition),]
cond1 <- NA
cond1freq <- NA
j <- 1
for (i in 1:nrow(wordlist)) {
num <- which(tolower(as.character(sim$X)) == wordlist$Dutch[i]) # adjust that to the name of the column of the Dutch words if necessary
if (length(num)==1 && wordlist$Condition[i]==1) {
cond1[j] <- num
cond1freq[j] <- wordlist$FreqNLCelexLog[i] # adjust this to the column name of the frequency information
j <- j +1
}
}
cond2 <- NA
j <- 1
cond2freq <- NA
for (i in 1:nrow(wordlist)) {
num <- which(tolower(as.character(sim$X)) == wordlist$Dutch[i])
if (length(num)==1 && wordlist$Condition[i]==2) {
cond2[j] <- num
cond2freq[j] <- wordlist$FreqNLCelexLog[i]
j <- j +1
}
}
cond1freq <- as.numeric(gsub(",", ".", as.character(cond1freq)))
cond2freq <- as.numeric(gsub(",", ".", as.character(cond2freq)))
sim[,-1] -> sim
sim[cond1,cond1]->Condition1low
sim[cond2,cond2]->Condition2low
as.numeric(as.matrix(Condition1low)) -> Cond1Newlow
as.numeric(as.matrix(Condition2low)) -> Cond2Newlow
t.test(Cond1Newlow,Cond2Newlow) # this compares semantic similarity between conditions
t.test(wordlist[wordlist$Condition==1,]$WordLength_EN, wordlist[wordlist$Condition==2,]$WordLength_EN) # this compares word length in Itlian
t.test(wordlist[wordlist$Condition==1,]$WordLength_ES, wordlist[wordlist$Condition==2,]$WordLength_ES) # this compares word length in Itlian
t.test(cond1freq,cond2freq) # this compares frequency
wordlist <- read.delim("ItemList_Corrected_C&P_Jan2018.txt", stringsAsFactors=FALSE)
sim <- read.csv("similarities.txt")
wordlist <-wordlist[order(wordlist$Condition),]
cond1 <- NA
cond1freq <- NA
j <- 1
for (i in 1:nrow(wordlist)) {
num <- which(tolower(as.character(sim$X)) == wordlist$Dutch[i]) # adjust that to the name of the column of the Dutch words if necessary
if (length(num)==1 && wordlist$Condition[i]==1) {
cond1[j] <- num
cond1freq[j] <- wordlist$FreqNLCelexLog[i] # adjust this to the column name of the frequency information
j <- j +1
}
}
cond2 <- NA
j <- 1
cond2freq <- NA
for (i in 1:nrow(wordlist)) {
num <- which(tolower(as.character(sim$X)) == wordlist$Dutch[i])
if (length(num)==1 && wordlist$Condition[i]==2) {
cond2[j] <- num
cond2freq[j] <- wordlist$FreqNLCelexLog[i]
j <- j +1
}
}
cond1freq <- as.numeric(gsub(",", ".", as.character(cond1freq)))
cond2freq <- as.numeric(gsub(",", ".", as.character(cond2freq)))
sim[,-1] -> sim
sim[cond1,cond1]->Condition1low
sim[cond2,cond2]->Condition2low
as.numeric(as.matrix(Condition1low)) -> Cond1Newlow
as.numeric(as.matrix(Condition2low)) -> Cond2Newlow
t.test(Cond1Newlow,Cond2Newlow) # this compares semantic similarity between conditions
t.test(wordlist[wordlist$Condition==1,]$WordLength_EN, wordlist[wordlist$Condition==2,]$WordLength_EN) # this compares word length in Itlian
t.test(wordlist[wordlist$Condition==1,]$WordLength_ES, wordlist[wordlist$Condition==2,]$WordLength_ES) # this compares word length in Itlian
t.test(cond1freq,cond2freq) # this compares frequency
wordlist <- read.delim("ItemList_Corrected_C&P_Jan2018.txt", stringsAsFactors=FALSE)
sim <- read.csv("similarities.txt")
wordlist <-wordlist[order(wordlist$Condition),]
cond1 <- NA
cond1freq <- NA
j <- 1
for (i in 1:nrow(wordlist)) {
num <- which(tolower(as.character(sim$X)) == wordlist$Dutch[i]) # adjust that to the name of the column of the Dutch words if necessary
if (length(num)==1 && wordlist$Condition[i]==1) {
cond1[j] <- num
cond1freq[j] <- wordlist$FreqNLCelexLog[i] # adjust this to the column name of the frequency information
j <- j +1
}
}
cond2 <- NA
j <- 1
cond2freq <- NA
for (i in 1:nrow(wordlist)) {
num <- which(tolower(as.character(sim$X)) == wordlist$Dutch[i])
if (length(num)==1 && wordlist$Condition[i]==2) {
cond2[j] <- num
cond2freq[j] <- wordlist$FreqNLCelexLog[i]
j <- j +1
}
}
cond1freq <- as.numeric(gsub(",", ".", as.character(cond1freq)))
cond2freq <- as.numeric(gsub(",", ".", as.character(cond2freq)))
sim[,-1] -> sim
sim[cond1,cond1]->Condition1low
sim[cond2,cond2]->Condition2low
as.numeric(as.matrix(Condition1low)) -> Cond1Newlow
as.numeric(as.matrix(Condition2low)) -> Cond2Newlow
t.test(Cond1Newlow,Cond2Newlow) # this compares semantic similarity between conditions
t.test(wordlist[wordlist$Condition==1,]$WordLength_EN, wordlist[wordlist$Condition==2,]$WordLength_EN) # this compares word length in Itlian
t.test(wordlist[wordlist$Condition==1,]$WordLength_ES, wordlist[wordlist$Condition==2,]$WordLength_ES) # this compares word length in Itlian
t.test(cond1freq,cond2freq) # this compares frequency
sim <- read.csv("similarities.txt")
numbers <- NA
j <- 1
for (i in 1:48) {
num <- which(tolower(as.character(sim$X)) == wordlist$Dutch[i])
if (length(num)==1) {
numbers[j] <- num
j <- j +1
}
}
sim[,-1] -> sim
sim[numbers,numbers] -> sims
rownames(sims) <- t(colnames(sims))
round(sims,2)->sims
View(sims)
wordlist <- read.delim("ItemList_Corrected_C&P_Jan2018.txt", stringsAsFactors=FALSE)
sim <- read.csv("similarities.txt")
wordlist <-wordlist[order(wordlist$Condition),]
cond1 <- NA
cond1freq <- NA
j <- 1
for (i in 1:nrow(wordlist)) {
num <- which(tolower(as.character(sim$X)) == wordlist$Dutch[i]) # adjust that to the name of the column of the Dutch words if necessary
if (length(num)==1 && wordlist$Condition[i]==1) {
cond1[j] <- num
cond1freq[j] <- wordlist$FreqNLCelexLog[i] # adjust this to the column name of the frequency information
j <- j +1
}
}
cond2 <- NA
j <- 1
cond2freq <- NA
for (i in 1:nrow(wordlist)) {
num <- which(tolower(as.character(sim$X)) == wordlist$Dutch[i])
if (length(num)==1 && wordlist$Condition[i]==2) {
cond2[j] <- num
cond2freq[j] <- wordlist$FreqNLCelexLog[i]
j <- j +1
}
}
cond1freq <- as.numeric(gsub(",", ".", as.character(cond1freq)))
cond2freq <- as.numeric(gsub(",", ".", as.character(cond2freq)))
sim[,-1] -> sim
sim[cond1,cond1]->Condition1low
sim[cond2,cond2]->Condition2low
as.numeric(as.matrix(Condition1low)) -> Cond1Newlow
as.numeric(as.matrix(Condition2low)) -> Cond2Newlow
t.test(Cond1Newlow,Cond2Newlow) # this compares semantic similarity between conditions
t.test(wordlist[wordlist$Condition==1,]$WordLength_EN, wordlist[wordlist$Condition==2,]$WordLength_EN) # this compares word length in Itlian
t.test(wordlist[wordlist$Condition==1,]$WordLength_ES, wordlist[wordlist$Condition==2,]$WordLength_ES) # this compares word length in Itlian
t.test(cond1freq,cond2freq) # this compares frequency
sim <- read.csv("similarities.txt")
numbers <- NA
j <- 1
for (i in 1:50) {
num <- which(tolower(as.character(sim$X)) == wordlist$Dutch[i])
if (length(num)==1) {
numbers[j] <- num
j <- j +1
}
}
sim[,-1] -> sim
sim[numbers,numbers] -> sims
rownames(sims) <- t(colnames(sims))
round(sims,2)->sims
View(sims)
sims[26:50,]->half
View(half)
colMeans(half)
order(colMeans(half))
colMeans(half)->means
order(means)
sims[1:25,]->half2
colMeans(half2)->means2
means2
View(half2)
sims[1:25,26:50]->half2
sims[1:25,1:25]->half2
colMeans(half2)->means2
means2
mean(means)
mean(means2)
sims[26:50,26:50]->half
colMeans(half)->means
mean(mean)
mean(means)
means
View(sims)
wordlist <- read.delim("ItemList_Corrected_C&P_Jan2018.txt", stringsAsFactors=FALSE)
sim <- read.csv("similarities.txt")
wordlist <-wordlist[order(wordlist$Condition),]
cond1 <- NA
cond1freq <- NA
j <- 1
for (i in 1:nrow(wordlist)) {
num <- which(tolower(as.character(sim$X)) == wordlist$Dutch[i]) # adjust that to the name of the column of the Dutch words if necessary
if (length(num)==1 && wordlist$Condition[i]==1) {
cond1[j] <- num
cond1freq[j] <- wordlist$FreqNLCelexLog[i] # adjust this to the column name of the frequency information
j <- j +1
}
}
cond2 <- NA
j <- 1
cond2freq <- NA
for (i in 1:nrow(wordlist)) {
num <- which(tolower(as.character(sim$X)) == wordlist$Dutch[i])
if (length(num)==1 && wordlist$Condition[i]==2) {
cond2[j] <- num
cond2freq[j] <- wordlist$FreqNLCelexLog[i]
j <- j +1
}
}
cond1freq <- as.numeric(gsub(",", ".", as.character(cond1freq)))
cond2freq <- as.numeric(gsub(",", ".", as.character(cond2freq)))
sim[,-1] -> sim
sim[cond1,cond1]->Condition1low
sim[cond2,cond2]->Condition2low
wordlist <- read.delim("ItemList_Corrected_C&P_Jan2018.txt", stringsAsFactors=FALSE)
sim <- read.csv("similarities.txt")
wordlist <-wordlist[order(wordlist$Condition),]
cond1 <- NA
cond1freq <- NA
j <- 1
for (i in 1:nrow(wordlist)) {
num <- which(tolower(as.character(sim$X)) == wordlist$Dutch[i]) # adjust that to the name of the column of the Dutch words if necessary
if (length(num)==1 && wordlist$Condition[i]==1) {
cond1[j] <- num
cond1freq[j] <- wordlist$FreqNLCelexLog[i] # adjust this to the column name of the frequency information
j <- j +1
}
}
cond2 <- NA
j <- 1
cond2freq <- NA
for (i in 1:nrow(wordlist)) {
num <- which(tolower(as.character(sim$X)) == wordlist$Dutch[i])
if (length(num)==1 && wordlist$Condition[i]==2) {
cond2[j] <- num
cond2freq[j] <- wordlist$FreqNLCelexLog[i]
j <- j +1
}
}
cond1freq <- as.numeric(gsub(",", ".", as.character(cond1freq)))
cond2freq <- as.numeric(gsub(",", ".", as.character(cond2freq)))
sim[,-1] -> sim
sim[cond1,cond1]->Condition1low
sim[cond2,cond2]->Condition2low
as.numeric(as.matrix(Condition1low)) -> Cond1Newlow
as.numeric(as.matrix(Condition2low)) -> Cond2Newlow
t.test(Cond1Newlow,Cond2Newlow) # this compares semantic similarity between conditions
t.test(wordlist[wordlist$Condition==1,]$WordLength_EN, wordlist[wordlist$Condition==2,]$WordLength_EN) # this compares word length in Itlian
t.test(wordlist[wordlist$Condition==1,]$WordLength_ES, wordlist[wordlist$Condition==2,]$WordLength_ES) # this compares word length in Itlian
t.test(cond1freq,cond2freq) # this compares frequency
wordlist <- read.delim("ItemList_Corrected_C&P_Jan2018.txt", stringsAsFactors=FALSE)
sim <- read.csv("similarities.txt")
wordlist <-wordlist[order(wordlist$Condition),]
cond1 <- NA
cond1freq <- NA
j <- 1
for (i in 1:nrow(wordlist)) {
num <- which(tolower(as.character(sim$X)) == wordlist$Dutch[i]) # adjust that to the name of the column of the Dutch words if necessary
if (length(num)==1 && wordlist$Condition[i]==1) {
cond1[j] <- num
cond1freq[j] <- wordlist$FreqNLCelexLog[i] # adjust this to the column name of the frequency information
j <- j +1
}
}
cond2 <- NA
j <- 1
cond2freq <- NA
for (i in 1:nrow(wordlist)) {
num <- which(tolower(as.character(sim$X)) == wordlist$Dutch[i])
if (length(num)==1 && wordlist$Condition[i]==2) {
cond2[j] <- num
cond2freq[j] <- wordlist$FreqNLCelexLog[i]
j <- j +1
}
}
cond1freq <- as.numeric(gsub(",", ".", as.character(cond1freq)))
cond2freq <- as.numeric(gsub(",", ".", as.character(cond2freq)))
sim[,-1] -> sim
sim[cond1,cond1]->Condition1low
sim[cond2,cond2]->Condition2low
as.numeric(as.matrix(Condition1low)) -> Cond1Newlow
as.numeric(as.matrix(Condition2low)) -> Cond2Newlow
t.test(Cond1Newlow,Cond2Newlow) # this compares semantic similarity between conditions
t.test(wordlist[wordlist$Condition==1,]$WordLength_EN, wordlist[wordlist$Condition==2,]$WordLength_EN) # this compares word length in Itlian
t.test(wordlist[wordlist$Condition==1,]$WordLength_ES, wordlist[wordlist$Condition==2,]$WordLength_ES) # this compares word length in Itlian
t.test(cond1freq,cond2freq) # this compares frequency
read.csv("similarities.csv")
setwd("U:\PhD\EXPERIMENT 3 -Honours\Script")
setwd("U:/PhD/EXPERIMENT 3 -Honours/Script")
read.csv("similarities.csv")
read.csv("similarities.csv")->sim
View(sim)
write.table(sim, "similaritiesnew.txt, quote = F, row.names = F, col.names = T, sep = "\t")
write.table(sim, "similaritiesnew.txt", quote = F, row.names = F, col.names = T, sep = "\t")
