total <- c(AFC_Word, empty, AFC_Pic, AFC_Pic_Naming[2], empty, Stem_Completion, empty,  Picture_NamingA, empty, Writing_A, empty, Picture_NamingB, empty, Writing_B, empty  m1,empty, m2)
cols <- c("gray92","gray53","white", "gray92","gray53","gray53", "white", "gray92","gray53","white","gray92","gray53","white", "gray92","gray53","white","gray92","gray53","white", "gray92","white","gray92")
2+2+3+2+2+2+2+2
17+7
cols
cols <- c("gray92","gray53","white", "gray92","gray53","gray53", "white", "gray92","gray53", "gray18", "white","gray92","gray53","white", "gray92","gray53","white","gray92","gray53","white","gray92","gray53","white", "gray92","white","gray92")
words <- paste(letters[c(1:26,1:26,1:26,1:22)],
letters[c(25:2,25:2,25:2,25:2,25:22)],
letters[c(3:26,3:26,3:26,1:26,1:2)],
sep="")
words
df <- data.frame(sample(0:1,100,replace=T,c(.4,.6)), # 10 bad participants
sample(0:1,100,replace=T,c(.4,.6)), # who know ~60%
sample(0:1,100,replace=T,c(.4,.6)),
sample(0:1,100,replace=T,c(.4,.6)),
sample(0:1,100,replace=T,c(.4,.6)),
sample(0:1,100,replace=T,c(.4,.6)),
sample(0:1,100,replace=T,c(.4,.6)),
sample(0:1,100,replace=T,c(.4,.6)),
sample(0:1,100,replace=T,c(.4,.6)),
sample(0:1,100,replace=T,c(.4,.6)),
sample(0:1,100,replace=T,c(.2,.8)), # 10 good participants
sample(0:1,100,replace=T,c(.2,.8)), # who know ~80%
sample(0:1,100,replace=T,c(.2,.8)),
sample(0:1,100,replace=T,c(.2,.8)),
sample(0:1,100,replace=T,c(.2,.8)),
sample(0:1,100,replace=T,c(.2,.8)),
sample(0:1,100,replace=T,c(.2,.8)),
sample(0:1,100,replace=T,c(.2,.8)),
sample(0:1,100,replace=T,c(.2,.8)),
sample(0:1,100,replace=T,c(.2,.8)))
colnames(df) <- paste("sub",1:20,sep="")
df
probs <- (colSums(df)+1)/(sum(df)+20) # Add some probability mass to back off from 0
probs
probs_sub <- colSums(df)/20
probs_sub
p <- c()
current_i <- c()
RE <- c()
for (i in 1:100) {
for (j in 1:20) {
p[j] <- (df[i,j]+.05)/(rowSums(df[i,])+1)
current_i[j] <- p[j]*log2(p[j]/probs[j])
}
RE[i] <- sum(current_i)
}
words[order(RE)]
words
summary(lm(probs_sub~unlist(df[order(RE)[1],])+
unlist(df[order(RE)[2],])+
unlist(df[order(RE)[3],])+
unlist(df[order(RE)[4],])+
unlist(df[order(RE)[5],])))
summary(lm(probs_sub~unlist(df[order(RE)[96],])+
unlist(df[order(RE)[97],])+
unlist(df[order(RE)[98],])+
unlist(df[order(RE)[99],])+
unlist(df[order(RE)[100],])))
setwd("U:/PhD/EXPERIMENT 3 -Honours/Script/ExampleOutput") ## change this to the directory of where you store the files
library(tidyr)
wordlist <- read.delim("FinalTest_list_pp_601.txt", stringsAsFactors=FALSE)
setwd("U:/PhD/EXPERIMENT 3 -Honours/")
sim <- read.csv("similarities.txt")
wordlist <-wordlist[order(wordlist$Condition),]
cond1 <- NA
cond1freq <- NA
j <- 1
for (i in 1:nrow(wordlist)) {
num <- which(tolower(as.character(sim$X)) == wordlist$Dutch[i]) # adjust that to the name of the column of the Dutch words if necessary
if (length(num)==1 && wordlist$Condition[i]==1) {
cond1[j] <- num
cond1freq[j] <- wordlist$FreqNLCelexLog[i] # adjust this to the column name of the frequency information
j <- j +1
}
}
cond2 <- NA
j <- 1
cond2freq <- NA
for (i in 1:nrow(wordlist)) {
num <- which(tolower(as.character(sim$X)) == wordlist$Dutch[i])
if (length(num)==1 && wordlist$Condition[i]==2) {
cond2[j] <- num
cond2freq[j] <- wordlist$FreqNLCelexLog[i]
j <- j +1
}
}
cond1freq <- as.numeric(gsub(",", ".", as.character(cond1freq)))
cond2freq <- as.numeric(gsub(",", ".", as.character(cond2freq)))
setwd("U:/PhD/EXPERIMENT 3 -Honours") ## change this to the directory of where you store the files
wordlist <- read.delim("ItemList_Corrected_C&P_Jan2018.txt", stringsAsFactors=FALSE)
sim <- read.csv("similarities.txt")
setwd("U:/PhD/EXPERIMENT 3 -Honours/Script/ExampleOutput")
choice <- read.delim("FinalTest_list_pp_601.txt", stringsAsFactors=FALSE)
choice <-choice[order(choice$Condition),]
cond1 <- NA
cond1freq <- NA
j <- 1
for (i in 1:nrow(choice)) {
num <- which(tolower(as.character(sim$X)) == choice$Item[i]) # adjust that to the name of the column of the Dutch words if necessary
num2 <-  which(tolower(as.character(wordlist$Dutch)) == choice$Item[i])
if (length(num)==1 && choice$Condition[i]==1) {
cond1[j] <- num
cond1freq[j] <- wordlist$FreqNLCelexLog[num2] # adjust this to the column name of the frequency information
j <- j +1
}
}
cond2 <- NA
j <- 1
cond2freq <- NA
for (i in 1:nrow(wordlist)) {
num <- which(tolower(as.character(sim$X)) == choice$Item[i])
num2 <-  which(tolower(as.character(wordlist$Dutch)) == choice$Item[i])
if (length(num)==1 && wordlist$Condition[i]==2) {
cond2[j] <- num
cond2freq[j] <- wordlist$FreqNLCelexLog[num2]
j <- j +1
}
}
cond1freq <- as.numeric(gsub(",", ".", as.character(cond1freq)))
cond2freq <- as.numeric(gsub(",", ".", as.character(cond2freq)))
sim[,-1] -> sim
sim[cond1,cond1]->Condition1low
sim[cond2,cond2]->Condition2low
as.numeric(as.matrix(Condition1low)) -> Cond1Newlow
as.numeric(as.matrix(Condition2low)) -> Cond2Newlow
t.test(Cond1Newlow,Cond2Newlow) # this compares semantic similarity between conditions
t.test(wordlist[wordlist$Condition==1,]$WordLength_EN, wordlist[wordlist$Condition==2,]$WordLength_EN) # this compares word length in Itlian
t.test(wordlist[wordlist$Condition==1,]$WordLength_ES, wordlist[wordlist$Condition==2,]$WordLength_ES) # this compares word length in Itlian
t.test(cond1freq,cond2freq) # this compares frequency
setwd("U:/PhD/EXPERIMENT 3 -Honours") ## change this to the directory of where you store the files
wordlist <- read.delim("ItemList_Corrected_C&P_Jan2018.txt", stringsAsFactors=FALSE)
sim <- read.csv("similarities.txt")
setwd("U:/PhD/EXPERIMENT 3 -Honours/Script/ExampleOutput")
choice <- read.delim("FinalTest_list_pp_601.txt", stringsAsFactors=FALSE)
choice <-choice[order(choice$Condition),]
cond1 <- NA
cond1freq <- NA
j <- 1
for (i in 1:nrow(choice)) {
num <- which(tolower(as.character(sim$X)) == choice$Item[i]) # adjust that to the name of the column of the Dutch words if necessary
num2 <-  which(tolower(as.character(wordlist$Dutch)) == choice$Item[i])
if (length(num)==1 && choice$Condition[i]==1) {
cond1[j] <- num
cond1freq[j] <- wordlist$FreqNLCelexLog[num2] # adjust this to the column name of the frequency information
j <- j +1
}
}
cond2 <- NA
j <- 1
cond2freq <- NA
for (i in 1:nrow(wordlist)) {
num <- which(tolower(as.character(sim$X)) == choice$Item[i])
num2 <-  which(tolower(as.character(wordlist$Dutch)) == choice$Item[i])
if (length(num)==1 && wordlist$Condition[i]==2) {
cond2[j] <- num
cond2freq[j] <- wordlist$FreqNLCelexLog[num2]
j <- j +1
}
}
cond1freq <- as.numeric(gsub(",", ".", as.character(cond1freq)))
cond2freq <- as.numeric(gsub(",", ".", as.character(cond2freq)))
sim[,-1] -> sim
sim[cond1,cond1]->Condition1low
sim[cond2,cond2]->Condition2low
as.numeric(as.matrix(Condition1low)) -> Cond1Newlow
as.numeric(as.matrix(Condition2low)) -> Cond2Newlow
t.test(Cond1Newlow,Cond2Newlow) # this compares semantic similarity between conditions
t.test(wordlist[wordlist$Condition==1,]$WordLength_EN, wordlist[wordlist$Condition==2,]$WordLength_EN) # this compares word length in Itlian
t.test(wordlist[wordlist$Condition==1,]$WordLength_ES, wordlist[wordlist$Condition==2,]$WordLength_ES) # this compares word length in Itlian
t.test(cond1freq,cond2freq) # this compares frequency
